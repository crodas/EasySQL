<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {


    class base_template_c4adc06fcaba37f452631fc5422ddc1f451c4bce
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Repository.tpl.php
     */
    class class_a70c700441f2ca1a7f9cce68047ff33925e70d04 extends base_template_c4adc06fcaba37f452631fc5422ddc1f451c4bce
    {

        public function hasSection($name)
        {

            return false;
        }


        public function renderSection($name, Array $args = array(), $fail_on_missing = true)
        {
            if (!$this->hasSection($name)) {
                if ($fail_on_missing) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }
                return "";
            }

        }

        public function enhanceException(Exception $e, $section = NULL)
        {
            if (!empty($e->enhanced)) {
                return;
            }

            $message = $e->getMessage() . "( IN " . 'Repository.tpl.php';
            if ($section) {
                $message .= " | section: {$section}";
            }
            $message .= ")";

            $object   = new ReflectionObject($e);
            $property = $object->getProperty('message');
            $property->setAccessible(true);
            $property->setValue($e, $message);

            $e->enhanced = true;
        }

        public function render(Array $vars = array(), $return = false)
        {
            try {
                return $this->_render($vars, $return);
            } catch (Exception $e) {
                if ($return) ob_get_clean();
                $this->enhanceException($e);
                throw $e;
            }
        }

        public function _render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }

            echo "<?php\n\nnamespace EasyRepository\\t";
            echo $mt=uniqid(true) . ";\n\nuse PDO;\nuse EasySQL\\Cursor;\n\n";
            foreach($files as $query) {

                $this->context['query'] = $query;
                echo "class " . ($query->getName()) . "Repository\n{\n    protected \$dbh;\n\n    public function __construct(PDO \$pdo)\n    {\n        \$this->dbh = \$pdo;\n    }\n\n";
                foreach($query->getMethods() as $name => $method) {

                    $this->context['name'] = $name;
                    $this->context['method'] = $method;
                    echo "    public function " . ($name) . "(" . ($method->getFunctionSignature()) . ")\n    {\n        \$stmt = \$this->dbh->prepare(";
                    var_export($method->getSQL());
                    echo ");\n";
                    foreach($method->getPHPCode() as $line) {

                        $this->context['line'] = $line;
                        echo "            " . ($line) . "\n";
                    }
                    if (!$method->isPluck() && $method->mapAsObject()) {
                        echo "            \$stmt->setFetchMode(PDO::FETCH_CLASS, ";
                        var_export($method->mapAsObject());
                        echo ", array(\$this->dbh, ";
                        var_export($method->getTables());
                        echo "));\n";
                    }
                    echo "        \$result = \$stmt->execute(" . ($method->getCompact()) . ");\n";
                    if ($method->isInsert()) {
                        echo "            return \$this->dbh->lastInsertId();\n";
                    }
                    else if ($method->changeSchema() || $method->isUpdate()) {
                        echo "            return true;\n";
                    }
                    else if ($method->isPluck()) {
                        echo "            \$rows = array();\n            \$stmt->setFetchMode(PDO::FETCH_NUM);\n            foreach (\$stmt as \$row) {\n";
                        if (count($method->getQuery()->getColumns()) == 1) {
                            echo "                    \$rows[] = \$row[0];\n";
                        }
                        else {
                            echo "                    \$rows[] = \$row;\n";
                        }
                        echo "            }\n            return \$rows;\n";
                    }
                    else if ($method->singleResult()) {
                        echo "            return \$stmt->fetch();\n";
                    }
                    else {
                        echo "            return \$stmt;\n";
                    }



                    echo "    }\n\n";
                }
                echo "}\n";
            }
            echo "\nreturn function(PDO \$pdo) {\n    return [\n";
            foreach($files as $query) {

                $this->context['query'] = $query;
                echo "        ";
                var_export(strtolower($query->getName()));
                echo " => new " . ($query->getName()) . "Repository(\$pdo),\n";
            }
            echo "    ];\n};\n";

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace EasySQL\Compiler {


    class Templates
    {
        public static function getAll()
        {
            return array (
                0 => 'repository',
            );
        }

        public static function getAllSections($name, $fail = true)
        {
            switch ($name) {
            default:
                if ($fail) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }

                return array();
            }
        }

        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'repository.tpl.php' => 'class_a70c700441f2ca1a7f9cce68047ff33925e70d04',
                'repository' => 'class_a70c700441f2ca1a7f9cce68047ff33925e70d04',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
